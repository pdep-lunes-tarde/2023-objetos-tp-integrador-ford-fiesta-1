import wollok.game.*

import bombas.*
import bomberman.*
import cajas.*
import juego.*
import powerups.*
import rivales.*

describe "Pruebas del Bomberman Blanco"
{
	test "El bomberman blanco inicia en la posicion (1 ; 1)" 
	{
		assert.equals(game.at(1,1),jugador1.position())
	}
	test "El bomberman blanco inicia con 3 vidas"
	{
		jugador1.iniciarPropiedades()
		assert.equals(3,jugador1.vidas())
	}
	test "El bomberman blanco al inicial solo puede poner 1 bomba"
	{
		jugador1.iniciarPropiedades()
		assert.equals(1,jugador1.capacidadDeBombas())
	}
	test "EL bomberman blanco al presionar la tecla ir arriba(w), avanza a la posicion (1;2)"
	{
		jugador1.irArriba()
		assert.equals(game.at(1,2),jugador1.position())
	}
	test "EL bomberman blanco al presionar la tecla ir derecha(d), avanza a la posicion (2;1)"
	{
		jugador1.irDerecha()
		assert.equals(game.at(2,1),jugador1.position())
	} 
	test "EL bomberman blanco al presionar la tecla ir abajo(s), permanece en la posicion (1;1)"
	{
		jugador1.iniciarPropiedades()
		zonaDeJuego.generarMapa()
		jugador1.irAbajo()
		assert.equals(game.at(1,1),jugador1.position())
	}
	test "EL bomberman blanco al presionar la tecla ir izquierda(a), permanece en la posicion (1;1), ya que las posiciones de los bordes no pueden ser ocupadas"
	{
		jugador1.iniciarPropiedades()
		zonaDeJuego.generarMapa()
		jugador1.irIzquierda()
		assert.equals(game.at(1,1),jugador1.position())
	}
	test "El bomberman blanco no puede ocupar posiciones pares (2n,2m) como por ejemplo (2,2)"
	{
		jugador1.iniciarPropiedades()
		zonaDeJuego.generarMapa()
		jugador1.irArriba()
		jugador1.irDerecha()
		assert.equals(game.at(1,2),jugador1.position())
		assert.notEquals(game.at(2,2),jugador1.position())
	}
	
	/* La bomba o el fuego deberian disminuir la vida al bomberman
	test "Cuando una bomba explota, el bomberman blanco pierde una vida"
	{
		const bomba = new Bomba(position = game.at(1,1), bombardero = jugador1, tamanio = 1, atraviesanParedes = false)
		jugador1.iniciarPropiedades()
		zonaDeJuego.generarMapa()
		bomba.colocarBomba()
		bomba.explota()
		bomba.eliminar()
		bomba.aparecerFuego()
		assert.equals(game.at(1,1),jugador1.position())
		assert.equals(game.at(1,1),bomba.position())
		bomba.efecto(jugador1)
		assert.equals(2,jugador1.vidas())//Aca falla, deberia mostrar que tiene 2 vidas pero tiene 3
		
	}*/
}

describe "prueba del bomberman negro"
{
	test "Mientras que el bomberman negro inicia en la posicion (13 ; 13)" 
	{
		assert.equals(game.at(13,13),jugador2.position())
	}
	test "El bomberman negro inicia con 3 vidas"
	{
		jugador2.iniciarPropiedades()
		assert.equals(3,jugador2.vidas())
	}
	test "El bomberman negro al inicial solo puede poner 1 bomba"
	{
		jugador2.iniciarPropiedades()
		assert.equals(1,jugador2.capacidadDeBombas())
	}
	test "EL bomberman negro al presionar la tecla ir arriba(w), permanece en la posicion (13;13)"
	{
		jugador2.iniciarPropiedades()
		zonaDeJuego.generarMapa()
		jugador2.irArriba()
		assert.equals(game.at(13,13),jugador2.position())
	}
	test "EL bomberman negro al presionar la tecla ir derecha(d), permanece en la posicion (13;13)"
	{
		jugador2.iniciarPropiedades()
		zonaDeJuego.generarMapa()
		jugador2.irDerecha()
		assert.equals(game.at(13,13),jugador2.position())
	} 
	test "EL bomberman negro al presionar la tecla ir abajo(s), avanza a la posicion (13;12)"
	{
		jugador2.iniciarPropiedades()
		jugador2.irAbajo()
		assert.equals(game.at(13,12),jugador2.position())
	}
	test "EL bomberman negro al presionar la tecla ir izquierda(a), avanza a la posicion (12;13)"
	{
		jugador2.iniciarPropiedades()
		jugador2.irIzquierda()
		assert.equals(game.at(12,13),jugador2.position())
	}

}
